/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.wingate.freectrl;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Ellipse2D;
import java.awt.geom.RoundRectangle2D;
import javax.swing.JPanel;

/**
 *
 * @author util2
 */
public class SliderCheckBox extends JPanel {

    private boolean state;
    private Point xy = new Point();
    
    /**
     * Creates new form SliderCheckBox
     */
    public SliderCheckBox() {
        initComponents();
        init();
    }
    
    private void init(){
        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                if(e.getButton() == MouseEvent.BUTTON1){
                    xy = e.getX() >= getWidth() / 2 ? new Point(getWidth(), 0) : new Point(0, 0);
                    repaint();
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if(e.getButton() == MouseEvent.BUTTON1){
                    xy = e.getX() >= getWidth() / 2 ? new Point(getWidth(), 0) : new Point(0, 0);
                    repaint();
                }
            }
        });
        addMouseMotionListener(new MouseMotionListener() {
            @Override
            public void mouseDragged(MouseEvent e) {
                xy = e.getPoint();
                repaint();
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                if(e.getButton() == MouseEvent.BUTTON1){
                    xy = e.getPoint();
                    repaint();
                }
            }
        });
    }
    
    @Override
    protected void paintComponent(final Graphics pG) {
        super.paintComponent(pG);
        
        if(getWidth() < getHeight()) setSize(getHeight() * 3, getHeight());
        
        // RR stands for Rounded Rectangle
        // EL stands for Ellipse
        double xrr = getWidth() / 10; double wrr = getWidth() - getWidth() / 5;
        double yrr = getWidth() / 10; double hrr = getHeight() - getWidth() / 5;
        double xel = getWidth() / 10; double wel = getHeight() - getWidth() / 5;
        double yel = getWidth() / 10; double hel = getHeight() - getWidth() / 5;
        double arc = wrr >= hrr ? wrr / 2 : hrr / 2 ;
        
        double min_thresold_x_cursor = xel + wel / 2;
        double max_thresold_x_cursor = getWidth() - wel / 2 - xel;
        
        double xel_ref = xy.getX() < min_thresold_x_cursor ? xel : 
                (xy.getX() > max_thresold_x_cursor ? getWidth() - 10 - arc : xy.getX() - arc / 2);
        
        state = xel_ref != xel;
        
        Color color = xy.getX() < min_thresold_x_cursor ? Color.red : 
                (xy.getX() > max_thresold_x_cursor ? Color.green : SystemColor.controlHighlight);

        final Graphics2D g = (Graphics2D) pG;
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        // Draw Rounded Rectangle of the background in grey
        g.setColor(Color.gray); 
        RoundRectangle2D rr = new RoundRectangle2D.Double(xrr, yrr, wrr, hrr, arc, arc);
        g.fill(rr);
        
        // Draw Circle of the foreground
        g.setColor(color);        
        Ellipse2D el = new Ellipse2D.Double(xel_ref, yel, wel, hel);
        g.fill(el);
    }
    
    public boolean getState() {
        return state;
    }

    public void setState(final boolean value) {
        state = value;
        xy = state == true ? new Point(getWidth(), 0) : new Point(0, 0);
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
